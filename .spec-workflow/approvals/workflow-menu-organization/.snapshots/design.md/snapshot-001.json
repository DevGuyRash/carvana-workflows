{
  "id": "snapshot_1761559798768_wa09c43qo",
  "approvalId": "approval_1761559798766_jfsfh3ki0",
  "approvalTitle": "workflow-menu-organization design",
  "version": 1,
  "timestamp": "2025-10-27T10:09:58.768Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Design Document\n\n## Overview\n\nEnhance the Workflow menu with persistent drag-and-drop ordering, keyboard-accessible reordering, and a Hidden workflows surface that declutters the primary list without losing discoverability. The feature extends the existing `MenuUI` Shadow DOM rendering and leverages shared storage utilities so personalization survives reloads and cross-tab usage.\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n- Continue to build on the shared `MenuUI` infrastructure and `Store` abstraction, avoiding direct DOM access from workflows.\n- Keep business logic separated from rendering by isolating persistence and ordering logic inside new utilities consumed by the UI class.\n\n### Project Structure (structure.md)\n- Place new persistence helpers under `packages/core/src/menu/` (new folder) while UI hooks remain inside `MenuUI` in `core/src/ui.ts`.\n- Co-locate CSS additions inside `MenuUI.css()` to respect the existing Shadow DOM styling pattern.\n\n## Code Reuse Analysis\n\n### Existing Components to Leverage\n- **`Store` (`core/src/storage.ts`)**: Persist order/hidden state using the established GM_* abstraction.\n- **`MenuUI` (`core/src/ui.ts`)**: Extend `renderWorkflows`, event binding, and tab system for the new interactions.\n- **`autorun` prefs utilities (`core/src/autorun.ts`)**: Follow serialization/validation patterns when storing workflow-specific data.\n\n### Integration Points\n- **Workflow registry**: Continue to receive `PageDefinition.workflows` and use IDs as stable keys for ordering.\n- **Shadow DOM tabs**: Reuse the existing tab switching logic to add a Hidden tab without rewriting tab state.\n- **Keyboard focus management**: Build on current button semantics to ensure new controls are accessible.\n\n## Architecture\n\nIntroduce a two-layer solution:\n1. **Preferences service** handles serialization, versioning, and reconciliation between stored order and runtime workflow list.\n2. **UI interaction layer** augments `MenuUI` with drag handles, keyboard shortcuts, and a Hidden tab populated from the service.\n\nThe design keeps persistence independent of the UI so future surfaces (e.g., profile tabs) can reuse ordering metadata.\n\n### Modular Design Principles\n- **Single File Responsibility**: `workflow-preferences.ts` manages storage; `drag-controller.ts` focuses on DOM drag mechanics.\n- **Component Isolation**: Hidden tab rendering and controls will live in a helper method `renderHiddenWorkflows()`.\n- **Service Layer Separation**: UI requests sorted/filtered workflow arrays from the service rather than manipulating raw storage directly.\n- **Utility Modularity**: Pointer/keyboard handlers packaged in reusable helpers to support future draggable lists.\n\n```mermaid\ngraph TD\n    Registry -->|workflows[]| PreferencesService\n    PreferencesService -->|order/hidden state| MenuUI\n    MenuUI -->|render| WorkflowsTab\n    MenuUI -->|render| HiddenTab\n    DragController -->|events| MenuUI\n    MenuUI -->|mutations| PreferencesService\n```\n\n## Components and Interfaces\n\n### `WorkflowPreferencesService`\n- **Purpose:** Provide order/hidden state retrieval and persistence keyed by workflow IDs.\n- **Interfaces:**\n  - `getOrdered(workflows: WorkflowDefinition[]): WorkflowDefinition[]`\n  - `isHidden(id: string): boolean`\n  - `toggleHidden(id: string, hidden?: boolean): void`\n  - `applyMove(id: string, targetIndex: number): WorkflowDefinition[]`\n  - `restoreDefaults(workflowIds: string[]): void`\n- **Dependencies:** `Store`\n- **Reuses:** Storage serialization patterns from `autorun.ts`.\n\n### `DragController`\n- **Purpose:** Manage pointer and keyboard drag interactions scoped to list items.\n- **Interfaces:**\n  - `attach(listElement: HTMLElement, options: { onMove(id, index); onCancel(); })`\n  - `detach()`\n- **Dependencies:** None outside DOM APIs.\n- **Reuses:** N/A â€“ new utility, but generic.\n\n### Hidden Tab Renderer (`renderHiddenWorkflows`)\n- **Purpose:** Populate the Hidden tab with compact cards and unhide controls, including search/filter.\n- **Interfaces:**\n  - `renderHiddenWorkflows(hiddenDefs: WorkflowDefinition[], options: HiddenRenderOptions)`\n- **Dependencies:** `WorkflowPreferencesService`, standard DOM helpers within `MenuUI`.\n- **Reuses:** Tab switching logic already bound in `MenuUI.bind()`.\n\n### Menu Augmentations\n- **Purpose:** Extend existing methods (`renderWorkflows`, `bind`) to incorporate new interactions and accessible controls.\n- **Interfaces:** Additional private helpers on `MenuUI` such as `renderWorkflowItem`, `attachReorderEvents`, and `announceStatus` for toasts.\n- **Dependencies:** Service + Drag controller.\n- **Reuses:** Profile activation buttons, run preference toggles, and options navigation.\n\n## Data Models\n\n### `WorkflowListPrefs`\n```\ntype WorkflowListPrefs = {\n  version: 1;\n  order: string[];        // workflow IDs in user-defined order\n  hidden: string[];       // workflow IDs flagged as hidden\n};\n```\n- `version` guards future migrations.\n- `order` persists full user ordering; reconcile against runtime list by falling back to append unknown IDs.\n- `hidden` stores IDs regardless of ordering.\n\n### `HiddenWorkflowViewModel`\n```\ntype HiddenWorkflowViewModel = {\n  id: string;\n  label: string;\n  description?: string;\n  autoRunActive: boolean;\n  lastRun?: LastRunInfo;\n};\n```\n- Pre-computed fields allow the Hidden tab to render quickly without re-fetching prefs.\n\n## Error Handling\n\n### Error Scenario 1: Corrupted Stored Preferences\n- **Handling:** Detect invalid JSON or missing keys, log a debug message, and rebuild default preferences from the current workflow registry.\n- **User Impact:** Users keep default ordering; toast optionally informs them preferences were reset.\n\n### Error Scenario 2: Drag Operation Interrupted\n- **Handling:** If pointer events end outside the list, ignore the move and snap the item back to its last persisted position.\n- **User Impact:** Item remains in its original spot with a subtle status announcement.\n\n## Testing Strategy\n\n### Unit Testing\n- Cover `WorkflowPreferencesService` reconciliation (missing IDs, new workflows, version mismatch).\n- Test `toggleHidden` side-effects ensuring hidden workflows are excluded from ordered lists and persisted correctly.\n\n### Integration Testing\n- Simulate drag-drop interactions in a jsdom-like environment to verify DOM ordering updates and storage writes (using Vitest + pointer event polyfills).\n- Validate Hidden tab search/filter toggles state and unhiding restores items to the right slot.\n\n### End-to-End Testing\n- Use existing demo workflows in a browser automation harness (Playwright or manual runbook) to confirm drag handles, keyboard shortcuts, hiding/unhiding, and auto-run prompts behave as specified.\n",
  "fileStats": {
    "size": 6731,
    "lines": 135,
    "lastModified": "2025-10-27T10:09:44.480Z"
  },
  "comments": []
}