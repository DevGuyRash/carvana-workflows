{
  "id": "snapshot_1761734700001_h7s4zvbmj",
  "approvalId": "approval_1761734700000_design",
  "approvalTitle": "Oracle invoice validation alert design v1.0",
  "version": 1,
  "timestamp": "2025-10-29T09:45:00.000Z",
  "trigger": "initial",
  "status": "approved",
  "content": "# Design Document\n\n## Overview\n\nImplement an Oracle auto-run workflow that detects invoice validation status, classifies the outcome, and renders a three-state animated banner inside the userscript HUD. The design introduces a reusable status detection helper, HUD alert renderer, and workflow definition that aligns with steering guardrails and approved requirements v0.2.\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n- TypeScript-first implementation leveraging existing npm workspace.\n- Reuse `@cv/core` workflow engine and MutationObserver-driven auto-run patterns.\n- Persist banner state through GM_* storage only when required by diagnostics, preventing oracle DOM mutations beyond reads.\n\n### Project Structure (structure.md)\n- Place shared Oracle helpers under `packages/oracle-userscript/src/shared/`.\n- Introduce one workflow file (`oracle-invoice-validation-alert.ts`) and register it via `packages/oracle-userscript/src/index.ts`.\n- House any HUD UI additions under `packages/core/src/ui/` in their own modules to maintain single-responsibility per file.\n\n## Code Reuse Analysis\n\n### Existing Components to Leverage\n- **`@cv/core/workflow`**: Provides declarative step execution, auto-run context tokens, and logging.\n- **`@cv/core/ui`**: Baseline HUD rendering utilities; extend to host animated banner component.\n- **Oracle shared selectors (pending)**: Build on existing Oracle selectors conventions inside `shared/` for stable targeting.\n\n### Integration Points\n- **Oracle userscript registry**: Register workflow in `packages/oracle-userscript/src/index.ts` alongside existing auto-run flows.\n- **Workflow history logger**: Append structured diagnostics (status, snippet) to the existing history store for export.\n- **Selector verification menu action**: Surface manual verification through the HUD actions registry.\n\n## Architecture\n\nModular design splits detection, presentation, and workflow orchestration. The workflow orchestrates detection helper output and delegates presentation to the HUD banner module. Diagnostics funnel through the workflow logger for persistence.\n\n### Modular Design Principles\n- **Single File Responsibility**: Detection helper handles DOM scraping; HUD module handles visual animation; workflow file wires steps together.\n- **Component Isolation**: HUD banner component exposes a narrow API (`showInvoiceValidationBanner`, `clearValidationBanner`).\n- **Service Layer Separation**: Workflow decisions (branching, retries) remain inside workflow definition; UI side-effects live in UI module.\n- **Utility Modularity**: Animation tokens and color constants defined in a dedicated `hud-theme-validation.ts` utility.\n\n```mermaid\ngraph TD\n    Detect[InvoiceStatusDetector] --> Workflow[oracle-invoice-validation-alert]\n    Workflow --> Banner[HudValidationBanner]\n    Workflow --> History[Workflow History Logger]\n    Banner --> HudRoot[Shadow DOM Menu]\n```\n\n## Components and Interfaces\n\n### InvoiceStatusDetector (new)\n- **Location:** `packages/oracle-userscript/src/shared/invoice/status-detector.ts`\n- **Purpose:** Encapsulate DOM queries around the `ValidationStatus` cell, returning `{ status, snippet, diagnostics }`.\n- **Interfaces:** `detectInvoiceValidationStatus(context: DetectorContext): Promise<DetectionResult>` with retries and optional manual verification mode.\n- **Dependencies:** `@cv/core/selector`, `waitFor`, MutationObserver convenience utilities.\n- **Reuses:** Steering-aligned selector patterns; uses requirements-provided DOM snippet for baseline matching.\n\n### HudValidationBanner (new)\n- **Location:** `packages/core/src/ui/hud-validation-banner.ts`\n- **Purpose:** Render animated banner states inside HUD overlay.\n- **Interfaces:**\n  - `showValidationBanner(payload: { state: 'validated' | 'needs-revalidated' | 'unknown'; message: string; snippet: string; diagnostics: Diagnostics })`\n  - `syncValidationBannerTheme(tokens: ValidationBannerTokens)`\n  - `clearValidationBanner()`\n- **Dependencies:** Existing HUD root container, CSS-in-JS utilities (or style injection helper) from `ui.ts`.\n- **Reuses:** HUD theme tokens; extends menu shadow DOM without leaking styles to Oracle DOM.\n\n### OracleInvoiceValidationAlertWorkflow (new)\n- **Location:** `packages/oracle-userscript/src/workflows/oracle-invoice-validation-alert.ts`\n- **Purpose:** Auto-run workflow that orchestrates detection, logs results, renders banner, and exposes manual verification action.\n- **Interfaces:** `WorkflowDefinition` export with steps: wait for invoice header, run detector via `execute` action, branch on result, call HUD banner helper, and log history.\n- **Dependencies:** `InvoiceStatusDetector`, `HudValidationBanner`, `@cv/core` workflow DSL.\n- **Reuses:** Auto-run context token utilities from `packages/core/src/autorun.ts`.\n\n### ValidationBannerTokens (new)\n- **Location:** `packages/core/src/ui/hud-theme-validation.ts`\n- **Purpose:** Centralize color palette, timing, easing, and spacing constants for the banner states.\n- **Interfaces:** `getValidationBannerTokens()` returning tokens; exported types for tests.\n- **Dependencies:** None external; relies on steering color guidance.\n- **Reuses:** Aligns with existing theme tokens defined in HUD modules.\n\n## Data Models\n\n### DetectionResult\n```\ntype DetectionResult = {\n  status: 'validated' | 'needs-revalidated' | 'unknown';\n  snippet: string; // sanitized innerText/outerHTML excerpt\n  elementPath: string; // header + aria lineage summary\n  attempts: number; // retry count used\n  verified: boolean; // true when invoked via manual verification action\n};\n```\n\n### ValidationBannerTokens\n```\ntype ValidationBannerTokens = {\n  validated: { baseColor: string; pulseAccent: string; durationMs: number; easing: string; shadow: string };\n  needsRevalidated: { startColor: string; endColor: string; keyframes: number[]; iconId: string };\n  unknown: { gradient: [string, string]; flashDurationMs: number; fallbackColor: string };\n  layout: { maxViewportHeightPct: number; horizontalPaddingPx: number; verticalPaddingPx: number; fontMinPx: number; fontMaxPx: number };\n};\n```\n\n## Error Handling\n\n### Error Scenarios\n1. **Status Element Missing:**\n   - **Handling:** Detector exhausts retries, returns `unknown` with diagnostic summary; workflow renders unknown-state banner and logs failure event.\n   - **User Impact:** HUD displays unknown banner prompting manual review and verifying selectors.\n\n2. **HUD Banner Render Failure:**\n   - **Handling:** Catch exceptions from HUD render, log with `logger.error`, and emit non-blocking toast via existing logging panel while keeping workflow state recorded.\n   - **User Impact:** Analyst sees console/log entry; workflow marks status as `unknown` but continues operations without auto-repeat.\n\n3. **Manual Verification Differs from Baseline:**\n   - **Handling:** workflow raises confirmation dialog instructing analysts to pause auto-run and notify maintainers; log includes diff between expected snippet and captured text.\n   - **User Impact:** Operators receive actionable message to reconcile selectors before re-enabling repeat.\n\n## Testing Strategy\n\n### Unit Testing\n- Add Vitest coverage for `InvoiceStatusDetector` using jsdom fixtures replicating the captured DOM snippet and edge cases (missing header, alternate casing).\n- Test `ValidationBannerTokens` to ensure easing, keyframes, and layout numbers align with requirements.\n\n### Integration Testing\n- Create jsdom-based workflow test that stubs HUD banner and ensures workflow branches invoke correct helpers and log payloads.\n- Verify manual verification action toggles `verified` flag and surfaces diff output when snippet changes.\n\n### End-to-End Testing\n- Manual validation in Oracle sandbox following script: load invoice header, observe auto-run banner for each status using forced DOM mocks via dev console.\n- Conduct selector/test walkthrough with requestor before marking tasks ready, confirming the recorded DOM snippet still matches production.\n",
  "fileStats": {
    "size": 5729,
    "lines": 126,
    "lastModified": "2025-10-29T09:44:00.000Z"
  },
  "comments": [
    {
      "type": "note",
      "comment": "Initial design covering detector helper, HUD banner module, and workflow wiring.",
      "timestamp": "2025-10-29T09:45:00.000Z"
    }
  ]
}
